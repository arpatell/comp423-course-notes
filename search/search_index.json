{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Aaron's Course Notes","text":"<p>This is my course notes page. Please explore some pages using the tabs or search above.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Aaron Patel</li> <li>Reviewer: Nandan Mogili</li> </ul>"},{"location":"tutorials/go-setup/#intro","title":"Intro","text":"<p>This is a guide for setting up a basic Go project. You will setup a Go project with a Git repository and dev container, and produce a \"Hello, World!\" program.</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p> <ul> <li>Git</li> <li>Docker</li> <li>VS Code with the Dev Containers extension</li> </ul>"},{"location":"tutorials/go-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a Local Directory and Initialize Git","text":"<ol> <li>Open your terminal and create a directory for the project.</li> <li> <p>Run the following commands:</p> <pre><code>mkdir go-hello-world\n\ncd go-hello-world\n\ngit init\n</code></pre> </li> <li> <p>Add a GitHub repository</p> <ol> <li>Create a remote repo in Github named \"go-hello-world\" and set visibility to public</li> <li> <p>In your project, add the Github repo as a remote:</p> <p><code>git remote add origin https://github.com/&lt;your-username&gt;/go-hello-world</code></p> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> </li> </ol> </li> </ol>"},{"location":"tutorials/go-setup/#step-2-set-up-a-development-container","title":"Step 2: Set Up a Development Container","text":"<ol> <li> <p>Create a <code>.devcontainer</code> directory and a <code>devcontainer.json</code> file:</p> <pre><code>mkdir .devcontainer\n\ntouch .devcontainer/devcontainer.json\n</code></pre> </li> <li> <p>Add the following to the <code>devcontainer.json</code> file:</p> <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/base:ubuntu\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/go\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"golang.go\"\n      ]\n    }\n  },\n  \"mounts\": [\n    \"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\"\n  ]\n}\n</code></pre> </li> <li> <p>Open your project in VS Code and reopen it in the container by clicking Reopen in Container.</p> </li> <li> <p>Verify that the Go VS Code Extension has downloaded by checking the extensions tab (the dev container setup should have done it, but sometimes it doesn't carry over).</p> </li> <li> <p>Verify that Go is installed in the container by running:</p> <pre><code>go version\n</code></pre> <p>You should see output similar to:</p> <pre><code>go version go1.20.14 linux/amd64\n</code></pre> </li> </ol>"},{"location":"tutorials/go-setup/#step-3-initialize-the-go-project","title":"Step 3: Initialize the Go Project","text":"<ol> <li> <p>Inside the dev container, run:</p> <pre><code>go mod init github.com/&lt;yourusername&gt;/go-hello-world\n</code></pre> <p>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>This creates a <code>go.mod</code> file, which defines your Go module.</p> </li> </ol>"},{"location":"tutorials/go-setup/#step-4-add-hello-world","title":"Step 4: Add \"Hello, World!\"","text":"<ol> <li> <p>Create a <code>main.go</code> file:</p> <pre><code>touch main.go\n</code></pre> </li> <li> <p>Add the following code to <code>main.go</code>:</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n</code></pre> </li> </ol>"},{"location":"tutorials/go-setup/#step-5-compile-and-run-the-project","title":"Step 5: Compile and Run the Project","text":"<ol> <li> <p>To compile the project, run:</p> <pre><code>go build -o hello\n</code></pre> <p>This creates an executable file named <code>hello</code>.</p> </li> <li> <p>Run the executable:</p> <pre><code>./hello\n</code></pre> <p>You should see this output:</p> <pre><code>Hello, World!\n</code></pre> </li> <li> <p>You can also run the following to combine the two previous steps:</p> <pre><code>go run main.go\n</code></pre> <p>Note: The <code>go build</code> command compiles the source code into an executable binary, which can be run without requiring Go runtime. In contrast, <code>go run</code> compiles and executes the code in a single step without creating a binary file. <code>go build</code> is similar to <code>gcc</code> in the sense that they both compile source code into an executable.</p> </li> </ol>"},{"location":"tutorials/go-setup/#step-6-push-to-github","title":"Step 6: Push to GitHub","text":"<ol> <li> <p>Stage files, and add a README if you'd like:</p> <pre><code>echo \"your-md-text-here\" &gt; README.md\n\ngit add .\n</code></pre> </li> <li> <p>Add configs and commit:</p> <pre><code>git config user.name --global \"your-username-here\"\n\ngit config user.email --global \"your-email-here\"\n\ngit commit -m \"your-message-here\"\n</code></pre> </li> <li> <p>Push to remote:</p> <pre><code>git branch -M main\n\ngit push --set-upstream origin main\n</code></pre> </li> </ol> <p>Congrats! You have completed the tutorial.</p>"}]}